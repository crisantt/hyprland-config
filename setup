#!/usr/bin/env bash

# - Post Arch installation script for me

echo "-----------------------"
echo "--- Post Arch Setup ---"
echo "-----------------------"
echo
mkdir -p "/home/$USER/git"
echo "Would you like to install the packages?"
read -p "Enter [Y]es : [n]o: " answer
case "$answer" in
    y|Y) 
	echo
        echo -e "\nWould you like this script to build programs?"
        read -p "Type yes : no: " answer        
        answer=${answer,,}
            if [[ "$answer" == "yes" ]]; then
                echo "---Installing AUR Helper (PARU)---"
                sudo pacman -S --needed base-devel
                cd "/home/$USER/git"
                git clone https://aur.archlinux.org/paru.git
                cd paru
                makepkg -si
                echo "---Paru Successfully Installed---"
                cd "/home/$USER"
            else 
                echo "Skipping  this part..."
            fi

        echo -e "Setup Starting...\nHyprland Packages"
       # Where installation starts
        sudo pacman -Syu --noconfirm hyprland \
        uwsm \
        xdg-desktop-portal-hyprland \
        xdg-desktop-portal-wlr \
        xdg-desktop-portal-gtk \
        hyprpaper \
        hyprshot \
        qt5-wayland \
        qt6-wayland
        
        echo

        echo -e "\nSystem Packages"
        sudo pacman -S --noconfirm libnotify

        echo
        
        echo -e "\nDeveloper Packages"
        sudo pacman -S --noconfirm zig \
        git \
	github-cli \
        wget \
        unzip \
        zip
        
        echo
        
        echo -e "\nUser Packages"
        sudo pacman -S --noconfirm ghostty \
        alacritty \
	kitty \
        mako \
        neovim \
        thunar \
        obs-studio \
	obsidian \
	discord
        paru -S tofi
        
        echo

        echo -e "\nGaming Packages"
        sudo pacman -S --noconfirm steam \
        lib32-mesa \
        vulkan-radeon \
        lib32-vulkan-radeon \
        vulkan-icd-loader \
        lib32-vulkan-icd-loader \
        wine-staging \
        giflib \
        lib32-giflib \
        libpng \
        lib32-libpng \
        libldap \
        lib32-libldap \
        gnutls \
        lib32-gnutls \
        mpg123 \
        lib32-mpg123 \
        openal \
        lib32-openal \
        v4l-utils \
        lib32-v4l-utils \
        libpulse \
        lib32-libpulse \
        libgpg-error \
        lib32-libgpg-error \
        alsa-plugins \
        lib32-alsa-plugins \
        alsa-lib \
        lib32-alsa-lib \
        libjpeg-turbo \
        lib32-libjpeg-turbo \
        sqlite \
        lib32-sqlite \
        libxcomposite \
        lib32-libxcomposite \
        libxinerama \
        lib32-libxinerama \
        libgcrypt \
        lib32-libgcrypt \
        ncurses \
        lib32-ncurses \
        opencl-icd-loader \
        lib32-opencl-icd-loader \
        libxslt \
        lib32-libxslt \
        libva \
        lib32-libva \
        gtk3 \
        lib32-gtk3 \
        gst-plugins-base-libs \
        lib32-gst-plugins-base-libs \
        lutris
        
        echo

        echo -e "\nInstalling Fonts"
        sudo pacman -S --noconfirm noto-fonts \
        noto-fonts-cjk \
        noto-fonts-emoji \
        noto-fonts-extra \
        ttf-dejavu \
        ttf-liberation \
        ttf-ubuntu-font-family \
        ttf-inconsolata \
        ttf-linux-libertine \
        ttf-freefont

        mkdir -p "/home/$USER/.fonts"
        cd "/home/$USER/.fonts"
        fonts=("CodeNewRoman" "DejaVuSansMono" "FiraCode" "JetBrainsMono" "Noto" "NerdFontsSymbolsOnly")
        for font in "${fonts[@]}"; do
            wget "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.4.0/$font.zip"
            unzip -n "$font.zip"
	    rm -f "$font.zip"
        done
        cd "/home/$USER"
        fc-cache -fv
        
        echo

        echo -e "\nChoose your browser"
        browser_opt=("Helium" "Floorp" "Firefox")
        select browser in "${browser_opt[@]}"; do
            if [[ "$browser" == "Helium" ]]; then
                echo -e "\nInstalling Helium Browser"
                paru -S helium-browser-bin
                echo -e "\nInstallation Done"
            elif [[ "$browser" == "Floorp" ]]; then
                echo -e "\nInstalling Floorp Browser"
                paru -S floorp
                echo -e "\nInstallation Done"
            elif [[ "$browser" == "Firefox" ]]; then
                echo -e "\nInstalling Firefox Browser"
                sudo pacman -S firefox
                echo -e "\nInstallation Done"
            fi
            break
        done
        ;;
    n|N) 
        echo "Exiting..."
        ;;
    *) echo "Invalid input. Please type (Y | y or n | N)";;
esac
